{"version":3,"sources":["graphql/queries.js","graphql/mutations.js","App.js","graphql/subscriptions.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["listNotes","createNote","updateNote","deleteNote","styles","container","padding","display","input","marginBottom","item","textAlign","p","color","CLIENT_ID","uuid","App","initialState","notes","loading","error","form","name","description","hideCompleted","useReducer","state","action","type","note","value","dispatch","a","API","graphql","query","notesData","data","items","console","log","alert","clientId","completed","id","CreateNote","variables","index","findIndex","n","UpdateNote","slice","DeleteNote","err","onChange","e","target","useEffect","fetchNotes","subscription","subscribe","next","noteData","onCreateNote","unsubscribe","style","width","verticalAlign","paddingRight","dataSource","renderItem","Item","actions","onClick","Meta","title","paddingLeft","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3a32ea4.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import React, { useEffect, useReducer } from 'react';\nimport { API } from 'aws-amplify';\nimport { List, Input, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote } from './graphql/subscriptions';\nimport { createNote as CreateNote, deleteNote as DeleteNote, updateNote as UpdateNote } from './graphql/mutations';\n\nimport './App.css';\n\nimport { v4 as uuid } from 'uuid';\n\nconst styles = {\n\tcontainer: { padding: 20, display: 'flex' },\n\tinput: { marginBottom: 10 },\n\titem: { textAlign: 'left' },\n\tp: { color: '#1890ff' }\n  \n};\n\nconst CLIENT_ID = uuid();\n\nexport default function App() {\n\t/* Example of some basic state */\n\tconst initialState = {\n\t\tnotes: [],\n\t\tloading: true,\n\t\terror: false,\n\t\tform: { name: '', description: '' },\n    hideCompleted: false\n\t};\n\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tfunction reducer(state, action) {\n\t\tswitch (action.type) {\n\t\t\tcase 'SET_NOTES':\n\t\t\t\treturn { ...state, notes: action.notes, loading: false };\n\t\t\tcase 'ERROR':\n\t\t\t\treturn { ...state, loading: false, error: true };\n\t\t\tcase 'ADD_NOTE':\n\t\t\t\treturn { ...state, notes: [action.note, ...state.notes] };\n\t\t\tcase 'RESET_FORM':\n\t\t\t\treturn { ...state, form: initialState.form };\n\t\t\tcase 'SET_INPUT':\n\t\t\t\treturn { ...state, form: { ...state.form, [action.name]: action.value } };\n\t\t\tcase 'TOGGLE_COMPLETED':\n\t\t\t\treturn { ...state, hideCompleted: !state.hideCompleted };\n\t\t\tdefault:\n\t\t\t\treturn state;\n\t\t}\n\t}\n\n\tasync function fetchNotes() {\n\t\ttry {\n\t\t\tconst notesData = await API.graphql({\n\t\t\t\tquery: listNotes\n\t\t\t});\n\t\t\tdispatch({ type: 'SET_NOTES', notes: notesData.data.listNotes.items });\n\t\t} catch (err) {\n\t\t\tconsole.log('error: ', err);\n\t\t\tdispatch({ type: 'ERROR' });\n\t\t}\n\t}\n\n\tasync function createNote() {\n\t\tconst { form } = state;\n\t\tif (!form.name || !form.description) {\n\t\t\treturn alert('please enter a name and description');\n\t\t}\n\t\tconst note = { ...form, clientId: CLIENT_ID, completed: false, id: uuid() };\n\t\tdispatch({ type: 'ADD_NOTE', note });\n\t\tdispatch({ type: 'RESET_FORM' });\n\t\ttry {\n\t\t\tawait API.graphql({\n\t\t\t\tquery: CreateNote,\n\t\t\t\tvariables: { input: note }\n\t\t\t});\n\t\t\tconsole.log('successfully created note!');\n\t\t} catch (err) {\n\t\t\tconsole.log('error: ', err);\n\t\t}\n\t}\n\n\tasync function updateNote(note) {\n\t\tconst index = state.notes.findIndex(n => n.id === note.id);\n\t\tconst notes = [...state.notes];\n\t\tnotes[index].completed = !note.completed;\n\t\tdispatch({ type: 'SET_NOTES', notes });\n\t\ttry {\n\t\t\tawait API.graphql({\n\t\t\t\tquery: UpdateNote,\n\t\t\t\tvariables: { input: { id: note.id, completed: notes[index].completed } }\n\t\t\t});\n\t\t\tconsole.log('note successfully updated!');\n\t\t} catch (err) {\n\t\t\tconsole.log('error: ', err);\n\t\t}\n\t}\n\n\tasync function deleteNote({ id }) {\n\t\tconst index = state.notes.findIndex(n => n.id === id);\n\t\tconst notes = [...state.notes.slice(0, index), ...state.notes.slice(index + 1)];\n\t\tdispatch({ type: 'SET_NOTES', notes });\n\t\ttry {\n\t\t\tawait API.graphql({\n\t\t\t\tquery: DeleteNote,\n\t\t\t\tvariables: { input: { id } }\n\t\t\t});\n\t\t\tconsole.log('successfully deleted note!');\n\t\t} catch (err) {\n\t\t\tconsole.log({ err });\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tfetchNotes();\n\t\tconst subscription = API.graphql({\n\t\t\tquery: onCreateNote\n\t\t}).subscribe({\n\t\t\tnext: noteData => {\n\t\t\t\tconst note = noteData.value.data.onCreateNote;\n\t\t\t\tif (CLIENT_ID === note.clientId) return;\n\t\t\t\tdispatch({ type: 'ADD_NOTE', note });\n\t\t\t}\n\t\t});\n\t\treturn () => subscription.unsubscribe();\n\t}, []);\n\n\tfunction onChange(e) {\n\t\tdispatch({ type: 'SET_INPUT', name: e.target.name, value: e.target.value });\n\t}\n\n\tfunction toggleCompleted(e) {\n\t\tdispatch({ type: 'TOGGLE_COMPLETED' });\n\t}\n\n\tfunction renderItem(item) {\n    if(item.completed && state.hideCompleted) {\n      return(<></>);\n    }\n\t\treturn (\n\t\t\t<List.Item\n\t\t\t\tstyle={styles.item}\n\t\t\t\tactions={[\n\t\t\t\t\t<p style={styles.p} onClick={() => deleteNote(item)}>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</p>,\n\t\t\t\t\t<p style={styles.p} onClick={() => updateNote(item)}>\n\t\t\t\t\t\t{item.completed ? 'completed' : 'mark completed'}\n\t\t\t\t\t</p>\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t<List.Item.Meta title={item.name} description={item.description} />\n\t\t\t</List.Item>\n\t\t);\n\t}\n  const createNoteWrapperStyles = {\n    paddingLeft: '1rem'\n  };\n  const listNotesWrapperStyles = {\n    width: '100%',\n    paddingRight: '1rem'\n  };\n  const globalControlsWrapperStyles = {\n    width: '100%',\n    textAlign: 'center',\n    color: '#1890ff'\n  }\n  const toggleInputStyles = {\n    display: 'inline',\n    width: '30px',\n    verticalAlign: 'middle'\n  }\n\n\treturn (\n    <div>\n      <div style={globalControlsWrapperStyles}>\n          <Input type=\"checkbox\" onChange={toggleCompleted} style={toggleInputStyles} />\n          {state.hideCompleted ? 'Show Completed' : 'Hide Completed'}\n      </div>\n      <div style={styles.container}>\n\n        <List style={listNotesWrapperStyles} loading={state.loading} dataSource={state.notes} renderItem={renderItem} />\n\n        <div style={createNoteWrapperStyles}>\n          <Input onChange={onChange} value={state.form.name} placeholder=\"Note Name\" name=\"name\" style={styles.input} />\n          <Input\n            onChange={onChange}\n            value={state.form.description}\n            placeholder=\"Note description\"\n            name=\"description\"\n            style={styles.input}\n          />\n          <Button onClick={createNote} type=\"primary\">\n            Create Note\n          </Button>\n        </div>\n\n      </div>\n\t\t</div>\n\t);\n}\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://ovcujvpuqbe75cpmz3ndjw4yuu.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-atzfvdcnczhu5iis2ifiainyue\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}